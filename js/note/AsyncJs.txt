Call Stack: 
- Mechanism the JS interpreter uses to keep track of its 
place in a script that calls multiple functions
- Last In First Out
//////////////////////////////////////////////////////////////////////////////////
JS is single-threaded
//////////////////////////////////////////////////////////////////////////////////
setTimeout(() => {
    <function>,
},<time in ms>)
- a WebAPI function
- Performed by browser, not JS
- Means "after <time in ms>, remind JS to do <function>" AS LONG AS it's passed 
as callback
- Similar to id = setInterval(() => {
    <function>
}, <time in ms>)
- clearInterval(id) to stop
//////////////////////////////////////////////////////////////////////////////////
Callback: A callback function is a function passed into another function 
as an argument, which is then invoked inside the outer function to complete 
some kind of routine or action.
//////////////////////////////////////////////////////////////////////////////////
Promises: are objects that represent the eventual completion 
or let's say eventual success or failure of an async operation
- Solution to callback hell (super nest)
- 3 states: pending, resolved, rejected
- A promise is a returned object to which you attach callbacks, instead 
of passing callbacks into a function
- Usually, just use promises that were created. but it helps to know
see promise.js

//////////////////////////////////////////////////////////////////////////////////
ASYNC Functions:
- New features
